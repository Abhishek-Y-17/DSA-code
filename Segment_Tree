/*
   segment tree code gives min query in range(l,r) and update ;
*/
#include <bits/stdc++.h>

using namespace std;
class SegTree
{
    vector<int> seg;

public:
    SegTree(int n)
    {
        seg.resize(4 * n + 1);
    }
    void build_tree(int ind, int low, int high, vector<int> &arr)
    {
        if (low == high)
        {
            seg[ind] = arr[low];
            return;
        }
        int mid = (low + high) / 2;
        build_tree(2 * ind + 1, low, mid, arr);
        build_tree(2 * ind + 2, mid + 1, high, arr);
        seg[ind] = min(seg[2 * ind + 1], seg[2 * ind + 2]);
    }
    int query(int ind, int low, int high, int l, int r)
    {
        // no overlap
        if (r < low || high < l)
            return INT_MAX;
        // complete overlap
        else if (l <= low && high <= r)
            return seg[ind];
        // partial overlap
        else
        {
            int mid = (low + high) / 2;
            int left = query(2 * ind + 1, low, mid, l, r);
            int right = query(2 * ind + 2, mid + 1, high, l, r);
            return min(left, right);
        }
    }
    void update(int ind, int low, int high, int arr_ind, int val)
    {
        if (low == arr_ind && high == arr_ind)
        {
            seg[ind] = val;
            return;
        }
        int mid = (low + high) / 2;
        if (arr_ind <= mid)
            update(2 * ind + 1, low, mid, arr_ind, val);
        else
            update(2 * ind + 2, mid + 1, high, arr_ind, val);
        seg[ind] = min(seg[2 * ind + 1], seg[2 * ind + 2]);
    }
};

int main()
{
    int n1;
    cin >> n1;
    vector<int> arr1(n1);
    for (int i = 0; i < n1; i++)
    {
        cin >> arr1[i];
    }
    SegTree sg1(n1);
    sg1.build_tree(0, 0, n1 - 1, arr1);
    int n2;
    cin >> n2;
    vector<int> arr2(n2);
    for (int i = 0; i < n2; i++)
    {
        cin >> arr2[i];
    }
    SegTree sg2(n2);
    sg2.build_tree(0, 0, n2 - 1, arr2);
    int q;
    cin >> q;
    while (q--)
    {
        int type;
        cin >> type;
        if (type == 1)
        {
            int l1, r1, l2, r2;
            cin >> l1 >> r1 >> l2 >> r2;
            int min1 = sg1.query(0, 0, n1 - 1, l1, r1);
            int min2 = sg2.query(0, 0, n2 - 1, l2, r2);
            cout << min(min1, min2) << endl;
        }
        else
        {
            int arrno;
            cin >> arrno;
            int arr_ind, val;
            cin >> arr_ind >> val;
            if (arrno == 1)
            {
                sg1.update(0, 0, n1 - 1, arr_ind, val);
                arr1[arr_ind] = val;
            }
            else
            {
                sg2.update(0, 0, n2 - 1, arr_ind, val);
                arr2[arr_ind] = val;
            }
        }
    }

    return 0;
}
