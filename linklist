#include <bits/stdc++.h>

using namespace std;

class node
{
    public:
    int data;
    node * next;
    
    // constructor
    node (int val)
    {
         this->data=val;
         this->next=NULL;
    }
};

void InsertAtHead(node * &head ,int d)
{  // create new node
 
    node * temp=new node(d);
    
    temp->next=head;
    head=temp;
}

void print(node * &head)
{  
    node * temp=head;
    while(temp!=NULL)
    {
        cout<<temp->data<<" ";
        temp=temp->next;
    }
    cout<<endl;
}
void InsertAtTail( node * &tail ,int d)
{  // create new node 
    node * temp=new node(d);
    tail->next=temp;
    tail=temp;

}
void InsertAtPosition( node * &head,node * &tail,int p,int d)
{
     node * temp=head;
     // creating new node to store d 
     node * newptr=new node(d);
     int cnt=1;
    // inserting at the beginning 
     if(p==1)
     {
        InsertAtHead(head,d);
        return;
     }
     
    while(cnt<p-1)
     {
        temp=temp->next;
        cnt++;

     }
     // inserting at the end since tail is not getting updated

     if(temp->next==NULL)
     {
        InsertAtTail(tail,d);
        return;
     }
     newptr->next=temp->next;
     temp->next =newptr;
}

void deleteNode( node * &head,node *&tail,int pos)
{
    int cnt=1;
    node * temp=head;
    // for deleting at the 1st postion
    if(pos==1)
    {
        head=head->next;
        delete temp;
        return;
    }
    
    while(cnt <pos-1)
    {
        temp=temp->next;
        cnt++;
    }

    node *ptr=temp->next;          // ptr pointing to no to be deleted 
    if(ptr->next==NULL)
    {  temp->next =NULL;
        tail=temp;
        delete ptr;
        return;
    }
    temp->next=ptr->next;
    delete ptr;

}



int main()
{
    node * ptr= new node(10);
    node * head=ptr;
    /*
    //  inserting values at head
    cout<< " enter value ";
    int d;
    cin>>d;
    InsertAtHead(head,d);
    InsertAtHead(head,15);
    InsertAtHead(head,25);
    print(head);
    */
   node * tail=ptr;
   InsertAtTail(tail,15);
   InsertAtTail(tail,20);
   InsertAtTail(tail,30);
   print(head);
 /*
   // inserting at position p
   InsertAtPosition(head,tail,4,25);
   print(head);
   InsertAtPosition(head,tail,2,22);
   print(head);
   InsertAtPosition(head,tail,1,5);
   print(head);
   InsertAtPosition(head,tail,8,40);
   print(head);
   InsertAtTail(tail,45);
   print(head);
   */
  deleteNode(head,tail,4);
  print(head);



    

    return 0;
}
